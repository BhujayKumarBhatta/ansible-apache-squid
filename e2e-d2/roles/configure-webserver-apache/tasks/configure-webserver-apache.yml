---
# Include IP address and host names of the DB server 
- name: Add IP address and host names of the DB server  to /etc/hosts
  lineinfile:
   dest: /etc/hosts
   line: "{{hostvars[item.vnm].ansible_ssh_host}}   {{hostvars[item.vnm].ansible_hostname}}  {{item.vnm}}"
  #debug:
     #msg: "{{hostvars[item.vnm].ansible_ssh_host}}"
     #msg: "{{hostvars[item.vnm].ansible_ssh_host}}"
  with_items: "{{ vms_to_create }}"
  #debug:
   #  msg: "{{ item.vnm }}"
  #with_items: "{{ vms_to_create }}"
    
      # - "{{hostvars[db_servers.name].ansible_ssh_host}}   {{hostvars[db_servers.name].ansible_hostname}}  {{db_hostname}}"
#       - "{{hostvars[db_servers.name].ansible_all_ipv4_addresses.0}}   {{hostvars[db_servers.name].ansible_hostname}}  {{db_hostname}}"
#        - "{{ hostvars[vnm]['ansible_ssh_host'] }}       {{ hostvars[vnm]['ansible_hostname'] }}    {{rp_pointer_name_to_vm}}"
#        - "{{hostvars[inventory_hostname].ansible_default_ipv4.address}}  {{rp_virtual_hostname_website}}    {{db_hostname}}"
#        - "{{hostvars[inventory_hostname].ansible_all_ipv4_addresses.0}}  {{rp_virtual_hostname_website}}"  
  tags:
    - app-server
    - dbip
- name: apt Install the software packages required for the application
  apt:
    name: "{{item}}"
    state: latest
  with_items: "{{app_server_apt_packages}}"
  ignore_errors: true
  tags: 
    - app-server-apt
    - app-server
#
#- name: Install pip for installing python packages
#  apt:
#    name: python-pip
#    state: latest
#  ignore_errors: true
#
- name: pip  Install the software packages required for the application
  pip:
    name: "{{item}}"
    state: present
  with_items: "{{app_server_pip_packages}}"
  ignore_errors: true
  tags: 
    - app-server-pip
    - app-server
#- name: Inserted by bhujay -Upgarde the packages setuptools==34.0.1, packaging==16.8,pyparsing==2.1.10
#  pip:
#    name: "{{item}}"
#    state: present
#  with_items:
#    - setuptools==34.0.1
#    - packaging==16.8
#    - pyparsing==2.1.10  
  

#this is a test   
#Deploy your code from github. No changes should be made in the server locally . All code to be changed in the development system and uploaded to github . This playbook will  checkout the latest code from git hub and keep the  server code syncronized.  
  
- name: checkout latest  code from git hub - all the codes for my django and celery applications will be downloaded 
  git: repo={{code_repo}}  dest={{app_dir}} accept_hostkey=True force=no
  tags: 
    - app-server-gitpull
    - app-server-django
    - app-server
# Assumtion is a fresh searchlog database in mssql server  with no records in django_migration table  . There is no migration folder ro files  in our app1 directory . Hence we will do a fresh initial migration. 
- name: django model file need to be activated by makemigrations
  django_manage: command="makemigrations app1 -noinput" app_path={{app_dir}}/djp1 settings=djp1.settings
  tags: 
    - app-server-django
    - app-server
- name: use migration command to actually create the database tables
  django_manage: command=migrate  app_path={{app_dir}}/djp1 settings=djp1.settings
  tags: 
    - app-server-django
    - app-server
#- django_manage: command="createsuperuser --noinput --username=admin  --email=admin@example.com" app_path={{app_dir}}/djp1

- name: restart rabbitmq-server
  service: name=rabbitmq-server state=started enabled=yes
  tags: 
    - app-server-rabbit
    - app-server
- name: enable rabbitmq plugins
  rabbitmq_plugin: names=rabbitmq_management,rabbitmq_tracing,rabbitmq_federation state=enabled
  notify:
    - restart rabbitmq
  tags: 
    - app-server-rabbit
    - app-server

- name: add users
  rabbitmq_user:
    user: "{{item.name}}"
    password: "{{item.pwd}}" 
    tags: "{{item.role}}" 
    vhost: "{{item.vhost}}"
    configure_priv: "{{item.configure_priv}}"
    write_priv: "{{item.write_priv}}"
    read_priv: "{{item.read_priv}}"
    state: present
  with_items: "{{rabbit_mq_users}"
  tags: 
    - app-server-rabbit
    - app-server
    

#  - name: remove default guest user
#    rabbitmq_user: user=guest state=absent

- name: ensure vhost /test is present
  rabbitmq_vhost: 
     name: "{{rabbit_vhost_name}}"
     state: present
  tags: 
    - app-server-rabbit
    - app-server

#  - name: set federation local-username
#    rabbitmq_parameter: component=federation name=local-username value='"user1"' state=present

####################Celery task starting , with every change in code under @app.task ( in our case AnalyzeServer) celery restart is required   
- name: Stop celery background tasks worker pool w1
  command: celery multi stop w1 -A djp1 -l info
  args: 
      chdir:{{app_dir}}/djp1
  tags: 
    - app-server-celery
    - app-server

- name: start celery in background mode - worker pool w1
  command: celery multi start w1 -A djp1 -l info
  args: 
      chdir:{{app_dir}}/djp1
  ignore_errors: true
  tags: 
    - app-server-celery
    - app-server
#####################Apache Configuration and starting the service , this overwirites any existing configuration ans is suitable for  a dedicated apache for our app ##############################################

#never give a space after  the equal to sign. For example path=<filename> is ok however  path= <filename> wont work.
- name: Check Apache2.conf file exists
  stat: path="{{item.fpath}}"    
  register: result
  with_items: "{{ app_server_apache_config_files }}"
  tags: 
    - app-server-apache
    - app-server

#- name: keep a backup of the existing apache2.conf file
#  copy:
#      src: "{{ item.fpath }}"
#      dest: "{{ item.rnm }}"
#  when: "result.results[{{item.x}}].stat.exists"  
#  with_items: "{{ app_server_apache_config_files }}"

- name: copy apache2.conf for Apache2 wsgi configuration and ports.conf for port 80
  copy : 
       src: "{{ item.fsrc }}"
       dest: "{{ item.fdest }}"
       backup: yes
  with_items: "{{ app_server_apache_config_files }}"
  notify:
      - stop apache 
      - start apace
  tags: 
    - app-server-apache
    - app-server

 #mysql -h HOST -u USERNAME -pPASSWORD 
