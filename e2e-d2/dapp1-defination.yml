#network defination 
networks_to_create:
  - {network_name: net7, is_the_network_shared_between_customers: false, accessable_outside_openstack_virtual_network: false}
  - {network_name: net8, is_the_network_shared_between_customers: false, accessable_outside_openstack_virtual_network: false}
subnetworks_to_create :
  - {network_name: net7, subnet_name: subnet7 , subnet_address_in_cidr: "120.1.1.0/24" , 
     dns_server_for_subnet: "120.1.1.10" , 
     additional_routing_for_subnet: ,
     dhcp_to_be_enabled: True, dhcp_ip_allocation_pool_start: 120.1.1.20 , dhcp_ip_allocation_pool_end: 120.1.1.240}
     
  - {network_name: net6,subnet_name: subnet8 , subnet_address_in_cidr: "130.1.1.0/24", 
     dns_server_for_subnet: "130.1.1.10" , 
     additional_routing_for_subnet: ,
     dhcp_to_be_enabled: True, dhcp_ip_allocation_pool_start: 130.1.1.20 , dhcp_ip_allocation_pool_end: 130.1.1.240}
#additionalRoutingForSubnetA: 
#{ destination: "186.1.1.0/24",nexthop: 185.1.1.2},
#   
# - destination: 187.1.1.0/24
#   nexthop: 185.1.1.3
##subnet on the net4  network
#additionalRoutingForSubnetB: 
# - destination: 185.1.1.0/24
#   nexthop: 186.1.1.2
# 


#First internal router to connect net3 to net4  
routerNameA: net7-net8
externalNetworkAttchedWithRouterA: 
subnetNamesTobeconnectedA: 
 - subnet7
 - subnet8
 
#2nd  router is external  to connect net 3 and net4  to external net
routerNameB: net7-net8-ext
externalNetworkAttchedWithRouterB: provider-303
externalSubnetNgatewayIPB: 
 - subnet: user-lan-subnet
   ip: 10.1.0.1
subnetNamesTobeconnectedB: 
# - provider-303-subnet
 - subnet7
 - subnet8

external_router:
     router_name: net5-net6-ext
     external_network_attched_with_router: provider-303
     subnet_names_tobeconnected:
       - subnet1net5
       - subnet1net6
# - 982840ed-cf8f-47fe-9459-8422d53ca5c3 # this is high availibility subnet fixed per installation
# check with 'openstack port list --router <anyexisting router name> ' . the subnetid associated with 
#HA network for the router is same.   
##########################################
#Define security group ( firewall)
security_groups:
  - {secgroupName: sec-app, ruleprotocol: tcp , startport: 22 , endport: 22 , ruleSourceIP: 0.0.0.0/0 }
  - {secgroupName: sec-db, ruleprotocol: tcp , startport: 80 , endport: 80 , ruleSourceIP: 0.0.0.0/0 }
  - {secgroupName: sec-app, ruleprotocol: tcp , startport: 80 , endport: 80 , ruleSourceIP: 0.0.0.0/0 }
  - {secgroupName: sec-app, ruleprotocol: tcp , startport: 15672 , endport: 15672 , ruleSourceIP: 0.0.0.0/0 }
  - {secgroupName: sec-app, ruleprotocol: icmp , startport: -1 , endport: -1 , ruleSourceIP: 0.0.0.0/0 }
  
  - {secgroupName: sec-db, ruleprotocol: icmp , startport: -1 , endport: -1 , ruleSourceIP: 0.0.0.0/0 }
  - {secgroupName: sec-db, ruleprotocol: tcp , startport: 22 , endport: 22 , ruleSourceIP: 0.0.0.0/0 }
  - {secgroupName: sec-db, ruleprotocol: tcp , startport: 3306 , endport: 3306 , ruleSourceIP: 0.0.0.0/0 }
    
###################################################################################
#create openstacck VM 
############################################################################################
filename_inventory_list_to_be_created: host-list.txt

vms_to_create: 
   - {vnm: app1-db, vimage: ubuntu16, vkeyname: k1,vflavor: 1c1g15, vnetid: net7 , 
      vfloating_ip_pool: provider-303, vsecurity_group: sec-db } 
    
   - {vnm: app1-app, vimage: ubuntu16, vkeyname: k1,vflavor: 1c1g15, vnetid: net8, 
      vfloating_ip_pool: provider-303, vsecurity_group: sec-app } 

#config during boot through cloud-init

vinstance_login_name: cloudy
vboot_login_home: /home/cloudy
vboot_login_shell: /bin/bash
vboot_login_keys: 
 - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMWWdDhejxsMelAtTjywjFaeINP+jr1+LxeXQ6tHIe1TzYJxRqsnf6mQIF23g4O16+pf+a2Wexh2xSpZopsk5p3uGrAvXUmTl/R2MFnOFr/SgESR8VYy5nSSkqcX2/ogRjto1q6hwFpYYtQpCNbLmZ4qddqfmFBlJ1yiFyt15Z9eiYjfPO/L6yLMVxYFp5d2dBPH81U+KF3BfvarmyXl8GK5rzLrNO6K+XJTooXwY5eWKTHIyNAor0su3hxewBoc7m95GCpvvKnZPSvzHBpX9sG4aE9p/RmLJu/KfLwryHBc6HwxSqXWNQ7bCZxCaDNecBL/sH6ZTb6KMU0xfJ+sGr itss@kickstart
vboot_login_sudo: ALL=(ALL) NOPASSWD:ALL
vpkg_during_boot:
 - python
vboot_apt_conf: |
vboot_apt_proxy: "http://10.0.0.14:3128"
vboot_http_proxy: "http://10.0.0.14:3128"
vobot_https_proxy: "http://10.0.0.14:3128"


############################################################################################
#All the VM will have the following configurations after boot , cganhed through ansible
####################################################################################################
host_table_entry: |
        10.0.0.51       haproxy1
        10.0.0.52       haproxy2
etc_environment_entry: |
        export https_proxy="http://10.0.0.14:3128"
        export http_proxy="http://10.0.0.14:3128"
        no_proxy=localhost,127.0.0.1,10.*.*.*,*.poc,dcim,dcim2,gitlab
apt_proxy_entry: |
        Acquire::http { Proxy "http://10.0.0.14:3128";};
        Acquire::https { Proxy "http://10.0.0.14:3128";};        
pip_proxy_entry: |
        [global]
        proxy = 10.0.0.14:3128

############################################################## 
#db server configuration 
#########################################################################
db_server_apt_packages:
 - python-pip
 - mysql-server
# - mysql-common
 - python-mysqldb
#   - MySQLdb
#   - mysql
#   - mysqldump
db_server_pip_packages:
db_hostname: mysqldb-server1
db_names: searchlog
database_user_name: "{{ mysql_db_user }}"
database_user_password: "{{ mysql_db_user_password }}"
database_host: localhost 
database_priv: "*.*:ALL,GRANT"
################################################################################
#app server configuration
###################################################################################
proxy_env:
    http_proxy: http://10.0.0.14:3128
    https_proxy: http://10.0.0.14:3128
    no_proxy: localhost,127.0.0.1,10.*.*.*,*.poc,dcim,dcim2,gitlaboxy.example.com:8080
app_server_apt_packages:
 - python-pip
 - libevent-dev
 - libffi-dev
 - libssl-dev
 - libxml2-dev
 - libxslt1-dev
 - libjpeg8-dev
 - zlib1g-dev
 - libevent-dev
 - libffi-dev
 - python-setuptools
 - build-essential
 - python-dev
 - g++
 - apache2
 - apache2-dev
 - libapache2-mod-wsgi 
# - unixodbc
# - unixodbc-dev  
# - freetds-dev
# - freetds-bin
# - tdsodbc   
 - python-virtualenv
 - curl   
 - git
 - python-pip 
 - python-mysqldb
 - mysql-common
# - mysql-client-core-5.6
 - rabbitmq-server 
################## paramiko need mitmproxy , actually cryptography , which require the following
### apt packges 
### apt install -y  libevent-dev  libffi-dev  libssl-dev  libxml2-dev  libxslt1-dev  libjpeg8-dev  zlib1g-dev  libevent-dev  libffi-dev
 
app_server_pip_packages:
 - mitmproxy
 - paramiko
## - pyodbc 
## - django-pyodbc-azure
 - django==1.10.1
 - celery==3.1.23
## - flower
 - django-celery
 - djangorestframework
 - django-filter
## - ipcalc

#git hub repository name and web address from where the application code will be synchorinized whenever the playbbok is run
code_repo: https://github.com/BhujayKumarBhatta/CloudSpacewithSearchLog-Python

#the application will be installed in this directory
app_dir: /opt/djangoproject
 

# in the app server the http service will be served by apache. apache  uses wsgi for serving django python codes. Configuration files are as follows
app_server_apache_config_files:
 - {name: apache2.conf, rnm: /etc/apache2/apache2.conf-ansible,fpath: /etc/apache2/apache2.conf, idn: A,x: 0, fsrc: files/apache2.conf.wsgi-ansible, fdest: /etc/apache2/apache2.conf}
 - {name: ports.conf, rnm: /etc/apache2/ports.conf-ansible,fpath: /etc/apache2/ports.conf, idn: B , x: 1,fsrc: files/ports.conf.ansible-file, fdest: /etc/apache2/ports.conf}

rabbit_mq_users:
   - {name: onepk, pwd: changeme, role: 'administrator, onepk', vhost: / , configure_priv: .*, 
       write_priv: .* , read_priv: .* }
   - {name: ubuntu, pwd: changeme, role: 'administrator,ubuntu', vhost: / , configure_priv: .*, 
       write_priv: .* , read_priv: .* }

rabbit_vhost_name: /myvhost
#######################################################################################################
#reverse proxy or the fron end web servers configuration 
#########################################################################################################
#considering there is a pre eisting reverse proxy server 
reverseproxyservername: haproxy2
reverseproxyserverip: 10.0.0.52
reverseproxyserversshport: 2223
rppointernametovm: app1-app
rpvirtualhostnamewebsite: django-app1
rp_http_port: 8080
rp_https_port: 4433
rp_rabbit_port: 8081
rp_internet_facing_nic: br-internet
rp_management_nic: br-mgmt
########################################################################################
