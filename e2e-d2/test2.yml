---
- hosts: django-appserver2
  vars_files: 
    - define-deployment-variables.yml
    - opnstack_authfile_wp.yml
  remote_user: cloudy
  become: true
#  become_user: root
#  become_method: sudo
#  
  tasks:
   
   - name: checkout latest  code from git hub - all the codes for my django and celery applications will be downloaded 
     git: repo={{code_repo}}  dest={{app_dir}} accept_hostkey=True force=no
#   - name: Create user and give permissions
#     mysql_user: name=mysql password=mysql123 host=localhost priv=*.*:ALL,GRANT state=absent
#  
#   - name: Create user and give permissions
#     mysql_user: name=mysql password=mysql123 host=% priv=*.*:ALL,GRANT state=present
#  
#   - name: give permission to all hosts
#     mysql_user: name=mysql  host_all=yes
#      
#   - name: Create database
#     mysql_db:
#       name: searchlog
#       state: present
##       login_user: 'root'
##       login_password: 'welcome@123'
##       login_host: localhost
#       
#       
#   - name: Display all variables/facts known for a host
#     #debug: var=hostvars[inventory_hostname] verbosity=4
#     debug: msg={{hostvars[inventory_hostname].ansible_default_ipv4}} 
#     debug: msg={{hostvars[inventory_hostname].ansible_eth0.ipv4.address}} 
#  
#  
#  tasks:
#   
#   
#   - name: Create a router for tenant admin
#     quantum_router:
#       state: present
#       auth_url: "{{ auth_url_var }}"
#       login_username: "{{ username_var }}"
#       login_password: "{{ password_var }}"
#       login_tenant_name: "{{ project_name_var }}"
#       name: router1
#   - name: Link External Network
#     quantum_router_gateway:
#       state: present
#       auth_url: "{{ auth_url_var }}"
#       login_username: "{{ username_var }}"
#       login_password: "{{ password_var }}"
#       login_tenant_name: "{{ project_name_var }}"
#       router_name: "{{router_name}}"
#       network_name: "{{external_network_attched_with_router}}"
#       
#   - name: attach private subnets
#     quantum_router_interface:
#       state: present
#       auth_url: "{{ auth_url_var }}"
#       login_username: "{{ username_var }}"
#       login_password: "{{ password_var }}"
#       login_tenant_name: "{{ project_name_var }}"
#       router_name: "{{router_name}}"
#       subnet_name: "{{subNetNameA}}"
#       
#   - name: attach private subnets
#     quantum_router_interface:
#       state: present
#       auth_url: "{{ auth_url_var }}"
#       login_username: "{{ username_var }}"
#       login_password: "{{ password_var }}"
#       login_tenant_name: "{{ project_name_var }}"
#       router_name: "{{router_name}}"
#       subnet_name: "{{subNetNameB}}"
         
   
   
   
#   - name: Create a new (or update an existing) router to connect two subnets 
#     os_router:
#       state: present
#       auth:
#          auth_url: "{{ auth_url_var }}"
#          username: "{{ username_var }}"
#          password: "{{ password_var }}"
#          project_name: "{{ project_name_var }}"    
#       name: ext-router
#       network: ext-net
#       external_fixed_ips:  
#         - subnet: user-lan-subnet
#           ip: 10.1.0.20    
#       interfaces:
##         - user-lan-subnet
#         - subnet1net3
#         - subnet1net4
#         - subnet1-net2   

#- hosts: vm10
#  vars_files: 
#    - roles/configure-webserver-apache/vars/main.yml
#  remote_user: cloudy
#  become: true
##  roles:
##    - configure-db-mysql
#
#  tasks:
#   - name: Add host addresses  to /etc/hosts
#     blockinfile:
#      dest: /etc/hosts
#      block: |
#          {{ ansible_default_ipv4.address }} 	abcd
####################Celery task starting , with every change in code under @app.task ( in our case AnalyzeServer) celery restart is required   
#   - name: Stop celery background tasks worker pool w1
#     command: celery multi stop w1 -A djp1 -l info
#     args:
#      chdir:{{app_dir}}/djp1

#   - name: start celery in background mode - worker pool w1
#     command: celery multi start w1 -A djp1 -l info
#     args:
#      chdir:{{app_dir}}/djp1
#     ignore_errors: true

#   - service:
#      name: celery
#      state: started
#   - apt:
#      name: python-mysqldb
#      state: present
#   - pip:
#       name: "{{item}}"
#       state: present
#       extra_args: '--proxy=dcim:3128'
#    - command: 'pip install --proxy=dcim:3128 {{ item }} ' 
#     with_items: "{{ pip_packages }}"
#   - shell: curl -v https://github.com/BhujayKumarBhatta/CloudSpacewithSearchLog-Python/
#   - name: checkout latest  code from git hub - all the codes for my django and celery applications will be downloaded
#     git: repo={{code_repo}}  dest={{app_dir}} accept_hostkey=True force=no
#   - name: django model file need to be activated by makemigrations
#     django_manage: command="makemigrations app1 -noinput" app_path={{app_dir}}/djp1 settings=djp1.settings
#
#   - name: use migration command to actually create the database tables
#     django_manage: command=migrate  app_path={{app_dir}}/djp1 settings=djp1.settings
#
#   - django_manage: command="createsuperuser --noinput --username=admin  --email=admin@example.com" app_path={{app_dir}}/djp1
#
#
#  environment:
#    http_proxy: http://dcim:3128
#    https_proxy: http://dcim:3128
#    no_proxy: localhost,127.0.0.1,10.*.*.*,*.poc,dcim,gitlaboxy.example.com:8080



#- name: removing  mysql package
#     apt:
#       name: mysql-server
#       state: absent
#       allow_unauthenticated: yes
#   - name: install mysql package
#     apt:
#       name: mysql-server
#       state: present
#       update_cache: yes
#       allow_unauthenticated: yes
