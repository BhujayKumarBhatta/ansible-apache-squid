#network defination 

#for first network 
net1_network_name: net3
net1_is_the_network_shared_between_customers: false
net1_accessable_outside_openstack_virtual_network: false

#subnet on the first   network
1_subnet_name: subnet1-net3
1_subnet_address_in_cidr: 175.1.1.0/24 
1_dns_server_for_subnet: 
 - 175.1.1.10
 - 175.1.1.11    
1_additional_routing_for_subnet: 
 - destination: 176.1.1.0/24
   nexthop: 175.1.1.2
 - destination: 177.1.1.0/24
   nexthop: 175.1.1.3
1_dhcp_to_be_enabled: True
1_dhcp_ip_allocation_pool_start: 175.1.1.20 
1_dhcp_ip_allocation_pool_end: 175.1.1.240

#for second  network 
net2_network_name: net4
net2_is_the_network_shared_between_customers: false  
net2_accessable_outside_openstack_virtual_network: false  

#subnet on the net4  network
2_subnet_name: subnet1-net4
2_subnet_address_in_cidr: 176.1.1.0/24 
2_dns_server_for_subnet:
 - 176.1.1.10
 - 176.1.1.11 
2_additional_routing_for_subnet: 
 - destination: 175.1.1.0/24
   nexthop: 176.1.1.2
 
2_dhcp_to_be_enabled: True
2_dhcp_ip_allocation_pool_start: 176.1.1.20
2_dhcp_ip_allocation_pool_end: 176.1.1.240

#First router to connect net3 to net4  
1_router_name: net3-net4 
1_external_network_attched_with_router: 
1_external_subnet_n_gatewayIP: 
 - subnet: public-subnet
   ip: 172.24.4.2
1_subnet_names_tobeconnected: 
 - subnet1-net3
 - subnet1-net4
 
#2nd  router to connect net 3 and net4  to external net
1_router_name: net3-net4-extnet
1_external_network_attched_with_router: ext-net
1_external_subnet_n_gatewayIP: 
 - subnet: user-lan-subnet
   ip: 10.1.0.1
1_subnet_names_tobeconnected: 
 - subnet1-net3
 - subnet1-net4

#######################################################################
# avilable subnet in  external network    
# user-lan-subnet 10.1.0.0/24 
# Internet-1 14.142.104.136/29 
# ext-subnet 203.0.113.0/24 
#
########################################################################################










#####################################################################################################################3
#Openstack VM Details
#give a vm name in the following format 
#vnm: vm11

# OS images  name that are avilable in open stack  .The image options are 
#		vimage: our-ubuntu16   , this image was created by installing iso on a kvm and conerting it as openstack image manually. 
#		vimage: ubuntu14-downloadedfrom-internet , this image was downloaded from ubuntu site . This is ready made openstack image. 
#vimage: ubuntu14-downloadedfrom-internet
#vkeynm: ubuntu-controller2-key

#vfalvor is vm size availbale options are 
# 		m1.r1d2  ,  1 cpu , 1 gb RAM and 20 gb disk 
#vflavor: m1.r1d2

# There are preexisting networks  with id as below . Check from horizon which network is required 
#		305c14fa-5c44-4cc6-969d-259333562249
#		a2310efa-6b42-41ce-b409-f7f522949de7 
#vnetid: 305c14fa-5c44-4cc6-969d-259333562249 

#Security groups are   
#vsecurity_group: 
#default: open ssh port , icmp 
#webserver: open http and httts
#mysql-db1-servers: open mysql 3306

#Once the vm is launched , store its openstack values such as floating ip etc. in a temporary varibale
#register-OpenStack-VM: newserver


###################################################################################

#create openstacck VM 

############################################################################################
app_servers: {name: django-appserver2, image: ubuntu14-downloadedfrom-internet, keyname: ubuntu-controller2-key,
              flavor: m1.r1d2, netid: net1 , security_group: webservers,
              register-OpenStack-VM: newappserver, inmemory_inventory_group: django-app1-servers, server_role: appserver} 

db_servers: {name: mysql-dbserver2, image: ubuntu14-downloadedfrom-internet, keyname: ubuntu-controller2-key,
             flavor: m1.r1d2, netid: net1 , security_group: mysqldb-security-group,
             register-OpenStack-VM: newdbserver, inmemory_inventory_group: mysql-db1-servers, server_role: dbserver} 

 
############################################################################################

#All the VM will have the following configurations 

####################################################################################################
host_table_entry: |
        10.0.0.52       dcim
        10.0.0.50        dcim2
etc_environment_entry: |
        export https_proxy="http://dcim:3128"
        export http_proxy="http://dcim:3128"
        no_proxy=localhost,127.0.0.1,10.*.*.*,*.poc,dcim,dcim2,gitlab
apt_proxy_entry: |
        Acquire::http { Proxy "http://dcim:3128";};
        Acquire::https { Proxy "http://dcim:3128";};        
pip_proxy_entry: |
        [global]
        proxy = dcim:3128
     

############################################################## 

#db server configuration 

#########################################################################

db_server_apt_packages:
# - mysql-server
# - mysql-common
# - python-mysqldb
#   - MySQLdb
#   - mysql
#   - mysqldump

db_server_pip_packages:

db_hostname: mysqldb-server1
db_names: searchlog

database_user_name: "{{ mysql_db_user }}"
database_user_password: "{{ mysql_db_user_password }}"
database_host: localhost 
database_priv: "*.*:ALL,GRANT"


################################################################################

#app server configuration

###################################################################################

proxy_env:
    http_proxy: http://dcim:3128
    https_proxy: http://dcim:3128
    no_proxy: localhost,127.0.0.1,10.*.*.*,*.poc,dcim,dcim2,gitlaboxy.example.com:8080

app_server_apt_packages:
# - apache2
# - apache2-dev
# - libapache2-mod-wsgi
# - python-setuptools
# - build-essential
# - python-dev
# - g++
## - unixodbc
## - unixodbc-dev  
## - freetds-dev
## - freetds-bin
## - tdsodbc   
# - python-virtualenv
# - curl    
# - rabbitmq-server  
# - git
# - python-pip
# - libevent-dev
# - libffi-dev
# - libssl-dev
# - libxml2-dev
# - libxslt1-dev
# - libjpeg8-dev
# - zlib1g-dev
# - libevent-dev
# - libffi-dev
# - python-mysqldb
# - mysql-client-core-5.6


app_server_pip_packages:
# - mitmproxy
# - paramiko
## - pyodbc 
## - django-pyodbc-azure
# - django==1.10.1
# - celery==3.1.23
## - flower
# - django-celery
# - djangorestframework
# - django-filter
## - ipcalc

#git hub repository name and web address from where the application code will be synchorinized whenever the playbbok is run
code_repo: https://github.com/BhujayKumarBhatta/CloudSpacewithSearchLog-Python

#the application will be installed in this directory
app_dir: /apt/djangoproject


# in the app server the http service will be served by apache. apache  uses wsgi for serving django python codes. Configuration files are as follows
app_server_apache_config_files:
 - {name: apache2.conf, rnm: /etc/apache2/apache2.conf-ansible,fpath: /etc/apache2/apache2.conf, idn: A,x: 0, fsrc: files/apache2.conf.wsgi-ansible, fdest: /etc/apache2/apache2.conf}
 - {name: ports.conf, rnm: /etc/apache2/ports.conf-ansible,fpath: /etc/apache2/ports.conf, idn: B , x: 1,fsrc: files/ports.conf.ansible-file, fdest: /etc/apache2/ports.conf}


#######################################################################################################

#reverse proxy or the fron end web servers configuration 

#########################################################################################################
#considering there is a pre eisting reverse proxy server 
reverseproxyservername: dcim
reverseproxyserverip: 10.0.0.52
reverseproxyserversshport: 2223
rppointernametovm: e2e-djangovm
rpvirtualhostnamewebsite: e2e-django






        
